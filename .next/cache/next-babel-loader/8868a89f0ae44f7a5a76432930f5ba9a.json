{"ast":null,"code":"import { useMutation, useQuery } from '@apollo/client';\nimport { useRouter } from 'next/router';\nimport { VIEWER, LOGOUT, REGISTER, LOGIN } from 'queries';\nexport function useViewer() {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(VIEWER);\n\n  if (loading || error || !data) {\n    return null;\n  }\n\n  return data.viewer;\n}\nexport function useLogout() {\n  const router = useRouter();\n  const [logout] = useMutation(LOGOUT, {\n    onError: e => {\n      var _e$graphQLErrors$, _e$graphQLErrors$$ext;\n\n      if (((_e$graphQLErrors$ = e.graphQLErrors[0]) === null || _e$graphQLErrors$ === void 0 ? void 0 : (_e$graphQLErrors$$ext = _e$graphQLErrors$.extensions) === null || _e$graphQLErrors$$ext === void 0 ? void 0 : _e$graphQLErrors$$ext.code) === 'FORBIDDEN') {\n        // eslint-disable-next-line no-console\n        console.log('User not logged in');\n      }\n    },\n    onCompleted: () => router.reload()\n  });\n  return async () => {\n    await logout();\n  };\n}\nexport function useRegister() {\n  const router = useRouter();\n  const [register] = useMutation(REGISTER, {\n    onError: e => {\n      var _e$graphQLErrors$2, _e$graphQLErrors$2$ex;\n\n      if (((_e$graphQLErrors$2 = e.graphQLErrors[0]) === null || _e$graphQLErrors$2 === void 0 ? void 0 : (_e$graphQLErrors$2$ex = _e$graphQLErrors$2.extensions) === null || _e$graphQLErrors$2$ex === void 0 ? void 0 : _e$graphQLErrors$2$ex.code) === 'FORBIDDEN') {\n        // eslint-disable-next-line no-console\n        console.log('User already exists');\n      }\n    },\n    onCompleted: () => {\n      router.push('/');\n    },\n    update: (cache, {\n      data: {\n        register: viewer\n      }\n    }) => {\n      cache.writeQuery({\n        query: VIEWER,\n        data: {\n          viewer\n        }\n      });\n    }\n  });\n  return async variables => {\n    await register({\n      variables\n    });\n  };\n}\nexport function useLogin() {\n  const router = useRouter();\n  const [login] = useMutation(LOGIN, {\n    onError: e => {\n      var _e$graphQLErrors$3, _e$graphQLErrors$3$ex;\n\n      if (((_e$graphQLErrors$3 = e.graphQLErrors[0]) === null || _e$graphQLErrors$3 === void 0 ? void 0 : (_e$graphQLErrors$3$ex = _e$graphQLErrors$3.extensions) === null || _e$graphQLErrors$3$ex === void 0 ? void 0 : _e$graphQLErrors$3$ex.code) === 'FORBIDDEN') {\n        // eslint-disable-next-line no-console\n        console.log('Invalid email or password');\n      }\n    },\n    onCompleted: () => {\n      router.push('/');\n    },\n    update: (cache, {\n      data: {\n        login: viewer\n      }\n    }) => {\n      cache.writeQuery({\n        query: VIEWER,\n        data: {\n          viewer\n        }\n      });\n    }\n  });\n  return async variables => {\n    await login({\n      variables\n    });\n  };\n}","map":{"version":3,"sources":["/Users/bibo/delivery/EIP/c3pm/platform/hooks/auth.ts"],"names":["useMutation","useQuery","useRouter","VIEWER","LOGOUT","REGISTER","LOGIN","useViewer","data","loading","error","viewer","useLogout","router","logout","onError","e","graphQLErrors","extensions","code","console","log","onCompleted","reload","useRegister","register","push","update","cache","writeQuery","query","variables","useLogin","login"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport { useRouter } from 'next/router';\nimport { Viewer } from 'types';\nimport {\n  VIEWER, LOGOUT, REGISTER, LOGIN,\n} from 'queries';\n\nimport { LoginParams, RegisterParams } from 'utils/validation';\n\nexport function useViewer(): Viewer | null {\n  const { data, loading, error } = useQuery<{ viewer: Viewer}>(VIEWER);\n\n  if (loading || error || !data) {\n    return null;\n  }\n  return data.viewer;\n}\n\nexport function useLogout(): () => Promise<void> {\n  const router = useRouter();\n  const [logout] = useMutation<{ logout: Viewer}>(LOGOUT, {\n    onError: (e) => {\n      if (e.graphQLErrors[0]?.extensions?.code === 'FORBIDDEN') {\n        // eslint-disable-next-line no-console\n        console.log('User not logged in');\n      }\n    },\n    onCompleted: () => router.reload(),\n  });\n\n  return (async (): Promise<void> => {\n    await logout();\n  });\n}\n\nexport function useRegister(): (variables: RegisterParams) => Promise<void> {\n  const router = useRouter();\n  const [register] = useMutation<{register: Viewer}, RegisterParams>(REGISTER, {\n    onError: (e) => {\n      if (e.graphQLErrors[0]?.extensions?.code === 'FORBIDDEN') {\n        // eslint-disable-next-line no-console\n        console.log('User already exists');\n      }\n    },\n    onCompleted: () => {\n      router.push('/');\n    },\n    update: (cache, { data: { register: viewer } }) => {\n      cache.writeQuery({\n        query: VIEWER,\n        data: { viewer },\n      });\n    },\n  });\n\n  return (async (variables: RegisterParams): Promise<void> => {\n    await register({ variables });\n  });\n}\n\nexport function useLogin(): (variables: LoginParams) => Promise<void> {\n  const router = useRouter();\n  const [login] = useMutation<{ login: Viewer}, LoginParams>(LOGIN, {\n    onError: (e) => {\n      if (e.graphQLErrors[0]?.extensions?.code === 'FORBIDDEN') {\n        // eslint-disable-next-line no-console\n        console.log('Invalid email or password');\n      }\n    },\n    onCompleted: () => {\n      router.push('/');\n    },\n    update: (cache, { data: { login: viewer } }) => {\n      cache.writeQuery({\n        query: VIEWER,\n        data: { viewer },\n      });\n    },\n  });\n\n  return (async (variables: LoginParams): Promise<void> => {\n    await login({ variables });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}