{"ast":null,"code":"var _jsxFileName = \"/Users/bibo/delivery/EIP/c3pm/platform/components/Button/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport MuiButton from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { createStyles } from '@material-ui/core/styles';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getButtonStyle = (props, color) => ({\n  '&:hover': props.variant === 'contained' ? {\n    backgroundColor: color.light\n  } : null,\n  background: props.variant === 'contained' && props.disabled === false ? color.main : 'transparent',\n  border: props.variant === 'outlined' ? `1px solid ${color.main}` : 'none',\n  color: props.variant !== 'contained' ? color.main : 'white'\n});\n\nconst useStyles = makeStyles(theme => createStyles({\n  default: {\n    color: 'white',\n    '& span': {\n      textAlign: 'center',\n      textTransform: 'none'\n    }\n  },\n  primary: props => getButtonStyle(props, theme.palette[props.color]),\n  error: props => getButtonStyle(props, theme.palette[props.color]),\n  success: props => getButtonStyle(props, theme.palette[props.color]),\n  warning: props => getButtonStyle(props, theme.palette[props.color])\n}));\nconst Button = React.forwardRef((_ref, ref) => {\n  let {\n    variant,\n    children,\n    className,\n    color = 'primary',\n    disabled = false\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"variant\", \"children\", \"className\", \"color\", \"disabled\"]);\n\n  const classes = useStyles({\n    variant,\n    disabled,\n    color\n  });\n  return __jsx(MuiButton, _extends({\n    className: clsx(classes.default, classes[color], className),\n    disabled: disabled,\n    variant: variant,\n    disableElevation: true,\n    ref: ref\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), children);\n});\nexport default Button;","map":{"version":3,"sources":["/Users/bibo/delivery/EIP/c3pm/platform/components/Button/index.tsx"],"names":["React","MuiButton","makeStyles","clsx","createStyles","getButtonStyle","props","color","variant","backgroundColor","light","background","disabled","main","border","useStyles","theme","default","textAlign","textTransform","primary","palette","error","success","warning","Button","forwardRef","ref","children","className","classes"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAyD,0BAAzD;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,YAAT,QAAoC,0BAApC;;AASA;AACA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAqBC,KAArB,MAAmD;AACxE,aAAWD,KAAK,CAACE,OAAN,KAAkB,WAAlB,GAAgC;AAAEC,IAAAA,eAAe,EAAEF,KAAK,CAACG;AAAzB,GAAhC,GAAmE,IADN;AAExEC,EAAAA,UAAU,EAAEL,KAAK,CAACE,OAAN,KAAkB,WAAlB,IAAiCF,KAAK,CAACM,QAAN,KAAmB,KAApD,GACRL,KAAK,CAACM,IADE,GACK,aAHuD;AAIxEC,EAAAA,MAAM,EAAER,KAAK,CAACE,OAAN,KAAkB,UAAlB,GAAgC,aAAYD,KAAK,CAACM,IAAK,EAAvD,GAA2D,MAJK;AAKxEN,EAAAA,KAAK,EAAED,KAAK,CAACE,OAAN,KAAkB,WAAlB,GAAgCD,KAAK,CAACM,IAAtC,GAA6C;AALoB,CAAnD,CAAvB;;AAQA,MAAME,SAAS,GAAGb,UAAU,CAAEc,KAAD,IAAkBZ,YAAY,CAAC;AAC1Da,EAAAA,OAAO,EAAE;AACPV,IAAAA,KAAK,EAAE,OADA;AAEP,cAAU;AACRW,MAAAA,SAAS,EAAE,QADH;AAERC,MAAAA,aAAa,EAAE;AAFP;AAFH,GADiD;AAQ1DC,EAAAA,OAAO,EAAGd,KAAD,IAAyBD,cAAc,CAACC,KAAD,EAAQU,KAAK,CAACK,OAAN,CAAcf,KAAK,CAACC,KAApB,CAAR,CARU;AAS1De,EAAAA,KAAK,EAAGhB,KAAD,IAAyBD,cAAc,CAACC,KAAD,EAAQU,KAAK,CAACK,OAAN,CAAcf,KAAK,CAACC,KAApB,CAAR,CATY;AAU1DgB,EAAAA,OAAO,EAAGjB,KAAD,IAAyBD,cAAc,CAACC,KAAD,EAAQU,KAAK,CAACK,OAAN,CAAcf,KAAK,CAACC,KAApB,CAAR,CAVU;AAW1DiB,EAAAA,OAAO,EAAGlB,KAAD,IAAyBD,cAAc,CAACC,KAAD,EAAQU,KAAK,CAACK,OAAN,CAAcf,KAAK,CAACC,KAApB,CAAR;AAXU,CAAD,CAA/B,CAA5B;AA8BA,MAAMkB,MAAM,GAAGzB,KAAK,CAAC0B,UAAN,CAAiB,OAEhBC,GAFgB,KAEmC;AAAA,MAFlC;AAC/BnB,IAAAA,OAD+B;AACtBoB,IAAAA,QADsB;AACZC,IAAAA,SADY;AACDtB,IAAAA,KAAK,GAAG,SADP;AACkBK,IAAAA,QAAQ,GAAG;AAD7B,GAEkC;AAAA,MADKN,KACL;;AACjE,QAAMwB,OAAO,GAAGf,SAAS,CAAC;AAAEP,IAAAA,OAAF;AAAWI,IAAAA,QAAX;AAAqBL,IAAAA;AAArB,GAAD,CAAzB;AAEA,SACE,MAAC,SAAD;AACE,IAAA,SAAS,EAAEJ,IAAI,CAAC2B,OAAO,CAACb,OAAT,EAAkBa,OAAO,CAACvB,KAAD,CAAzB,EAAkCsB,SAAlC,CADjB;AAEE,IAAA,QAAQ,EAAEjB,QAFZ;AAGE,IAAA,OAAO,EAAEJ,OAHX;AAIE,IAAA,gBAAgB,MAJlB;AAKE,IAAA,GAAG,EAAEmB;AALP,KAMMrB,KANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQGsB,QARH,CADF;AAYD,CAjBc,CAAf;AAmBA,eAAeH,MAAf","sourcesContent":["import React from 'react';\nimport MuiButton, { ButtonProps as MuiButtonProps } from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { createStyles, Theme } from '@material-ui/core/styles';\nimport { PaletteColor } from '@material-ui/core/styles/createPalette';\n\ninterface StyledProps {\n  variant: MuiButtonProps['variant'];\n  disabled: boolean;\n  color: 'primary' | 'success' | 'warning' | 'error';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getButtonStyle = (props: StyledProps, color: PaletteColor): any => ({\n  '&:hover': props.variant === 'contained' ? { backgroundColor: color.light } : null,\n  background: props.variant === 'contained' && props.disabled === false\n    ? color.main : 'transparent',\n  border: props.variant === 'outlined' ? `1px solid ${color.main}` : 'none',\n  color: props.variant !== 'contained' ? color.main : 'white',\n});\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  default: {\n    color: 'white',\n    '& span': {\n      textAlign: 'center',\n      textTransform: 'none',\n    },\n  },\n  primary: (props: StyledProps) => (getButtonStyle(props, theme.palette[props.color])),\n  error: (props: StyledProps) => (getButtonStyle(props, theme.palette[props.color])),\n  success: (props: StyledProps) => (getButtonStyle(props, theme.palette[props.color])),\n  warning: (props: StyledProps) => (getButtonStyle(props, theme.palette[props.color])),\n}));\n\nexport interface ButtonProps {\n  className?: string;\n  variant?: MuiButtonProps['variant'];\n  type?: MuiButtonProps['type'];\n  color?: 'primary' | 'success' | 'warning' | 'error';\n  disabled?: boolean;\n  href?: string;\n  fullWidth?: MuiButtonProps['fullWidth'];\n  size?: MuiButtonProps['size'];\n  startIcon?: MuiButtonProps['startIcon'];\n  endIcon?: MuiButtonProps['endIcon'];\n  component?: React.ElementType;\n  onClick?: () => void;\n  children: React.ReactNode;\n}\n\nconst Button = React.forwardRef(({\n  variant, children, className, color = 'primary', disabled = false, ...props\n}: ButtonProps, ref: React.Ref<HTMLButtonElement>): JSX.Element => {\n  const classes = useStyles({ variant, disabled, color });\n\n  return (\n    <MuiButton\n      className={clsx(classes.default, classes[color], className)}\n      disabled={disabled}\n      variant={variant}\n      disableElevation\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </MuiButton>\n  );\n});\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}