{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bibo/delivery/EIP/c3pm/platform/components/Button/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport MuiButton from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { createStyles } from '@material-ui/core/styles';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar getButtonStyle = function getButtonStyle(props, color) {\n  return {\n    '&:hover': props.variant === 'contained' ? {\n      backgroundColor: color.light\n    } : null,\n    background: props.variant === 'contained' && props.disabled === false ? color.main : 'transparent',\n    border: props.variant === 'outlined' ? \"1px solid \".concat(color.main) : 'none',\n    color: props.variant !== 'contained' ? color.main : 'white'\n  };\n};\n\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    \"default\": {\n      color: 'white',\n      '& span': {\n        textAlign: 'center',\n        textTransform: 'none'\n      }\n    },\n    primary: function primary(props) {\n      return getButtonStyle(props, theme.palette[props.color]);\n    },\n    error: function error(props) {\n      return getButtonStyle(props, theme.palette[props.color]);\n    },\n    success: function success(props) {\n      return getButtonStyle(props, theme.palette[props.color]);\n    },\n    warning: function warning(props) {\n      return getButtonStyle(props, theme.palette[props.color]);\n    }\n  });\n});\nvar Button = /*#__PURE__*/React.forwardRef(_c = _s(function (_ref, ref) {\n  _s();\n\n  var variant = _ref.variant,\n      children = _ref.children,\n      className = _ref.className,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'primary' : _ref$color,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      props = _objectWithoutProperties(_ref, [\"variant\", \"children\", \"className\", \"color\", \"disabled\"]);\n\n  var classes = useStyles({\n    variant: variant,\n    disabled: disabled,\n    color: color\n  });\n  return __jsx(MuiButton, _extends({\n    className: clsx(classes[\"default\"], classes[color], className),\n    disabled: disabled,\n    variant: variant,\n    disableElevation: true,\n    ref: ref\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }), children);\n}, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n}));\n_c2 = Button;\nexport default Button;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button$React.forwardRef\");\n$RefreshReg$(_c2, \"Button\");","map":{"version":3,"sources":["/Users/bibo/delivery/EIP/c3pm/platform/components/Button/index.tsx"],"names":["React","MuiButton","makeStyles","clsx","createStyles","getButtonStyle","props","color","variant","backgroundColor","light","background","disabled","main","border","useStyles","theme","textAlign","textTransform","primary","palette","error","success","warning","Button","forwardRef","ref","children","className","classes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MuiButton, { ButtonProps as MuiButtonProps } from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { createStyles, Theme } from '@material-ui/core/styles';\nimport { PaletteColor } from '@material-ui/core/styles/createPalette';\n\ninterface StyledProps {\n  variant: MuiButtonProps['variant'];\n  disabled: boolean;\n  color: 'primary' | 'success' | 'warning' | 'error';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getButtonStyle = (props: StyledProps, color: PaletteColor): any => ({\n  '&:hover': props.variant === 'contained' ? { backgroundColor: color.light } : null,\n  background: props.variant === 'contained' && props.disabled === false\n    ? color.main : 'transparent',\n  border: props.variant === 'outlined' ? `1px solid ${color.main}` : 'none',\n  color: props.variant !== 'contained' ? color.main : 'white',\n});\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  default: {\n    color: 'white',\n    '& span': {\n      textAlign: 'center',\n      textTransform: 'none',\n    },\n  },\n  primary: (props: StyledProps) => (getButtonStyle(props, theme.palette[props.color])),\n  error: (props: StyledProps) => (getButtonStyle(props, theme.palette[props.color])),\n  success: (props: StyledProps) => (getButtonStyle(props, theme.palette[props.color])),\n  warning: (props: StyledProps) => (getButtonStyle(props, theme.palette[props.color])),\n}));\n\nexport interface ButtonProps {\n  className?: string;\n  variant?: MuiButtonProps['variant'];\n  type?: MuiButtonProps['type'];\n  color?: 'primary' | 'success' | 'warning' | 'error';\n  disabled?: boolean;\n  href?: string;\n  fullWidth?: MuiButtonProps['fullWidth'];\n  size?: MuiButtonProps['size'];\n  startIcon?: MuiButtonProps['startIcon'];\n  endIcon?: MuiButtonProps['endIcon'];\n  component?: React.ElementType;\n  onClick?: () => void;\n  children: React.ReactNode;\n}\n\nconst Button = React.forwardRef(({\n  variant, children, className, color = 'primary', disabled = false, ...props\n}: ButtonProps, ref: React.Ref<HTMLButtonElement>): JSX.Element => {\n  const classes = useStyles({ variant, disabled, color });\n\n  return (\n    <MuiButton\n      className={clsx(classes.default, classes[color], className)}\n      disabled={disabled}\n      variant={variant}\n      disableElevation\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </MuiButton>\n  );\n});\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}