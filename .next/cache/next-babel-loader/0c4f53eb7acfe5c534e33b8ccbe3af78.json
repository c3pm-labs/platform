{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/bibo/delivery/EIP/c3pm/platform/components/TextInput/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useField } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nvar useStyles = makeStyles({\n  root: {\n    margin: 0\n  }\n});\n\nvar TextInput = function TextInput(_ref) {\n  _s();\n\n  var _ref$disableHelperTex = _ref.disableHelperText,\n      disableHelperText = _ref$disableHelperTex === void 0 ? false : _ref$disableHelperTex,\n      props = _objectWithoutProperties(_ref, [\"disableHelperText\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  var classes = useStyles();\n  var multiline = props.multiline,\n      rows = props.rows;\n  var helperText = ' ';\n\n  if (disableHelperText) {\n    helperText = '';\n  } else if (!!meta.error && meta.touched) {\n    helperText = meta.error;\n  }\n\n  return __jsx(TextField, _extends({\n    variant: \"outlined\",\n    helperText: helperText,\n    error: !!(meta.error && meta.touched),\n    size: \"small\",\n    multiline: multiline,\n    rows: rows,\n    FormHelperTextProps: {\n      classes: {\n        root: classes.root\n      }\n    }\n  }, field, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }));\n};\n\n_s(TextInput, \"UWX0x8kDyLJY6AVb1owDnj33CHE=\", false, function () {\n  return [useField, useStyles];\n});\n\n_c = TextInput;\nexport default TextInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextInput\");","map":{"version":3,"sources":["/Users/bibo/delivery/EIP/c3pm/platform/components/TextInput/index.tsx"],"names":["React","useField","TextField","makeStyles","useStyles","root","margin","TextInput","disableHelperText","props","field","meta","classes","multiline","rows","helperText","error","touched"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AAEA,IAAMC,SAAS,GAAGD,UAAU,CAAC;AAC3BE,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE;AADJ;AADqB,CAAD,CAA5B;;AAqBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA0E;AAAA;;AAAA,mCAAvEC,iBAAuE;AAAA,MAAvEA,iBAAuE,sCAAnD,KAAmD;AAAA,MAAzCC,KAAyC;;AAAA,kBACpER,QAAQ,CAACQ,KAAD,CAD4D;AAAA;AAAA,MACnFC,KADmF;AAAA,MAC5EC,IAD4E;;AAE1F,MAAMC,OAAO,GAAGR,SAAS,EAAzB;AAF0F,MAGlFS,SAHkF,GAG9DJ,KAH8D,CAGlFI,SAHkF;AAAA,MAGvEC,IAHuE,GAG9DL,KAH8D,CAGvEK,IAHuE;AAI1F,MAAIC,UAAU,GAAG,GAAjB;;AACA,MAAIP,iBAAJ,EAAuB;AACrBO,IAAAA,UAAU,GAAG,EAAb;AACD,GAFD,MAEO,IAAI,CAAC,CAACJ,IAAI,CAACK,KAAP,IAAgBL,IAAI,CAACM,OAAzB,EAAkC;AACvCF,IAAAA,UAAU,GAAGJ,IAAI,CAACK,KAAlB;AACD;;AAED,SACE,MAAC,SAAD;AACE,IAAA,OAAO,EAAC,UADV;AAEE,IAAA,UAAU,EAAED,UAFd;AAGE,IAAA,KAAK,EAAE,CAAC,EAAEJ,IAAI,CAACK,KAAL,IAAcL,IAAI,CAACM,OAArB,CAHV;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,SAAS,EAAEJ,SALb;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,mBAAmB,EAAE;AAAEF,MAAAA,OAAO,EAAE;AAAEP,QAAAA,IAAI,EAAEO,OAAO,CAACP;AAAhB;AAAX;AAPvB,KAQMK,KARN,EASMD,KATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAaD,CAxBD;;GAAMF,S;UACkBN,Q,EACNG,S;;;KAFZG,S;AA0BN,eAAeA,SAAf","sourcesContent":["import React from 'react';\nimport { useField } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nconst useStyles = makeStyles({\n  root: {\n    margin: 0,\n  },\n});\n\nexport interface TextInputProps {\n  label?: string;\n  required?: boolean;\n  type?: string;\n  placeholder?: string;\n  name: string;\n  multiline?: boolean;\n  rows?: number;\n  fullWidth?: boolean;\n  disableHelperText?: boolean;\n  InputProps?: {\n    endAdornment: JSX.Element;\n  };\n}\n\nconst TextInput = ({ disableHelperText = false, ...props }: TextInputProps): JSX.Element => {\n  const [field, meta] = useField(props);\n  const classes = useStyles();\n  const { multiline, rows } = props;\n  let helperText = ' ';\n  if (disableHelperText) {\n    helperText = '';\n  } else if (!!meta.error && meta.touched) {\n    helperText = meta.error;\n  }\n\n  return (\n    <TextField\n      variant=\"outlined\"\n      helperText={helperText}\n      error={!!(meta.error && meta.touched)}\n      size=\"small\"\n      multiline={multiline}\n      rows={rows}\n      FormHelperTextProps={{ classes: { root: classes.root } }}\n      {...field}\n      {...props}\n    />\n  );\n};\n\nexport default TextInput;\n"]},"metadata":{},"sourceType":"module"}