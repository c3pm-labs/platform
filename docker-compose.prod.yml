version: '2.4'

services:
  db:
    image: 'postgres'
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5

  db-migrations:
    image: c3pm/back/prod
    build:
      context: back
      dockerfile: prod.Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
    volumes:
      - ./back:/home/node/app
      - back-node_modules:/home/node/app/node_modules
    command: npx prisma migrate deploy --preview-feature
    depends_on:
      db:
        condition: service_healthy

  localstack:
    image: 'localstack/localstack'
    ports:
      - 4566:4566
    healthcheck:
      test: awslocal s3 ls
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      REGISTRY_BUCKET_NAME: registry-c3pm-io
      SERVICES: s3
    volumes:
      - ./scripts/localstack:/docker-entrypoint-initaws.d

  back:
    image: c3pm/back/prod
    build:
      context: back
      dockerfile: prod.Dockerfile
    ports:
      - 4000:4000
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
      PORT: 4000
      ALLOWED_ORIGIN: http://localhost:3000
      SESSION_SECRET: toto
      FRONTEND_URL: http://localhost:3000
      REGISTRY_BUCKET_NAME: registry-c3pm-io
      REGISTRY_SECRET: secret
      REGISTRY_KEY: key
      REGISTRY_URL: http://localstack:4566
    volumes:
      - back-node_modules:/home/node/app/node_modules
    depends_on:
      localstack:
        condition: service_healthy
      db:
        condition: service_healthy
      db-migrations:
        condition: service_started

  front:
    image: c3pm/front/prod
    build:
      context: front
      dockerfile: prod.Dockerfile
    ports:
      - 3000:3000
    volumes:
      - front-node_modules:/home/node/app/node_modules

volumes:
  back-node_modules:
  front-node_modules:
