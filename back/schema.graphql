### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Mutation {
  login(login: String!, password: String!): Viewer!
  logout: Viewer!
  register(email: String!, password: String!, username: String!): Viewer!
  update(description: String, email: String, id: String, username: String): User
}

type Package {
  author: User!
  latest: Version!
  name: String!
  versions(after: VersionWhereUniqueInput, before: VersionWhereUniqueInput, first: Int, last: Int): [Version!]!
}

input PackageWhereUniqueInput {
  name: String
}

type Query {
  package(name: String!): Package!
  search(keyword: String!): [Package!]!
  user(id: String, username: String): User
  version(packageName: String!, version: String): Version!
  viewer: Viewer!
}

type User {
  description: String!
  email: String!
  id: String!
  packages(after: PackageWhereUniqueInput, before: PackageWhereUniqueInput, first: Int, last: Int): [Package!]!
  username: String!
}

type Version {
  description: String!
  license: String!
  package: Package!
  publishedAt: DateTime!
  readme: String!
  version: String!
}

input VersionPackageNameCompoundUniqueInput {
  packageName: String!
  version: String!
}

input VersionWhereUniqueInput {
  version_packageName: VersionPackageNameCompoundUniqueInput
}

type Viewer {
  email: String!
  id: String!
  username: String!
}
